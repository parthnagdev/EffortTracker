/* tslint:disable */
/* eslint-disable */
/**
 * Effort Tracker
 * These are APIs for Effort tracker system.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiResponse
 */
export interface ApiResponse {
    /**
     * 
     * @type {number}
     * @memberof ApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponse
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface DeleteTaskRequest
 */
export interface DeleteTaskRequest {
    /**
     * 
     * @type {string}
     * @memberof DeleteTaskRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface Filter
 */
export interface Filter {
    /**
     * 
     * @type {Array<string>}
     * @memberof Filter
     */
    'idFilter'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Filter
     */
    'userFilter'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Filter
     */
    'projectFilter'?: Array<string>;
    /**
     * 
     * @type {State}
     * @memberof Filter
     */
    'stateFilter'?: State;
    /**
     * 
     * @type {Array<string>}
     * @memberof Filter
     */
    'parentIdFilter'?: Array<string>;
}


/**
 * 
 * @export
 * @interface FilterProject
 */
export interface FilterProject {
    /**
     * 
     * @type {Array<string>}
     * @memberof FilterProject
     */
    'idFilter'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FilterProject
     */
    'nameFilter'?: Array<string>;
}
/**
 * 
 * @export
 * @interface FilterUser
 */
export interface FilterUser {
    /**
     * 
     * @type {Array<string>}
     * @memberof FilterUser
     */
    'userFilter'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ListProjectsRequest
 */
export interface ListProjectsRequest {
    /**
     * 
     * @type {FilterProject}
     * @memberof ListProjectsRequest
     */
    'filter'?: FilterProject;
}
/**
 * 
 * @export
 * @interface ListProjectsResponse
 */
export interface ListProjectsResponse {
    /**
     * 
     * @type {Array<Project>}
     * @memberof ListProjectsResponse
     */
    'projectList'?: Array<Project>;
}
/**
 * 
 * @export
 * @interface ListTasksRequest
 */
export interface ListTasksRequest {
    /**
     * 
     * @type {Filter}
     * @memberof ListTasksRequest
     */
    'filter'?: Filter;
}
/**
 * 
 * @export
 * @interface ListTasksResponse
 */
export interface ListTasksResponse {
    /**
     * 
     * @type {Array<Task>}
     * @memberof ListTasksResponse
     */
    'taskList'?: Array<Task>;
}
/**
 * 
 * @export
 * @interface ListUsersRequest
 */
export interface ListUsersRequest {
    /**
     * 
     * @type {FilterUser}
     * @memberof ListUsersRequest
     */
    'filter'?: FilterUser;
}
/**
 * 
 * @export
 * @interface ListUsersResponse
 */
export interface ListUsersResponse {
    /**
     * 
     * @type {Array<User>}
     * @memberof ListUsersResponse
     */
    'userList'?: Array<User>;
}
/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'endDate'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const State = {
    Open: 'OPEN',
    Inprogress: 'INPROGRESS',
    Complete: 'COMPLETE',
    Review: 'REVIEW',
    Blocked: 'BLOCKED'
} as const;

export type State = typeof State[keyof typeof State];


/**
 * 
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'projectId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    'estimate'?: number;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'username'?: string;
    /**
     * 
     * @type {State}
     * @memberof Task
     */
    'state'?: State;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'parentId'?: string;
}


/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username'?: string;
}

/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds project in the system
         * @summary Adds project in the system
         * @param {Project} project Adds project in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject: async (project: Project, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'project' is not null or undefined
            assertParamExists('createProject', 'project', project)
            const localVarPath = `/project/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(project, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists project in the system
         * @summary Lists project in the system
         * @param {ListProjectsRequest} listProjectsRequest Lists project in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjects: async (listProjectsRequest: ListProjectsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listProjectsRequest' is not null or undefined
            assertParamExists('listProjects', 'listProjectsRequest', listProjectsRequest)
            const localVarPath = `/project/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listProjectsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * performs project updation
         * @summary Updates a project
         * @param {Project} [project] Project object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject: async (project?: Project, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/project/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(project, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds project in the system
         * @summary Adds project in the system
         * @param {Project} project Adds project in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProject(project: Project, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProject(project, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.createProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Lists project in the system
         * @summary Lists project in the system
         * @param {ListProjectsRequest} listProjectsRequest Lists project in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProjects(listProjectsRequest: ListProjectsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListProjectsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProjects(listProjectsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.listProjects']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * performs project updation
         * @summary Updates a project
         * @param {Project} [project] Project object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProject(project?: Project, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProject(project, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.updateProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * Adds project in the system
         * @summary Adds project in the system
         * @param {Project} project Adds project in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(project: Project, options?: any): AxiosPromise<Project> {
            return localVarFp.createProject(project, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists project in the system
         * @summary Lists project in the system
         * @param {ListProjectsRequest} listProjectsRequest Lists project in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjects(listProjectsRequest: ListProjectsRequest, options?: any): AxiosPromise<ListProjectsResponse> {
            return localVarFp.listProjects(listProjectsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * performs project updation
         * @summary Updates a project
         * @param {Project} [project] Project object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject(project?: Project, options?: any): AxiosPromise<Project> {
            return localVarFp.updateProject(project, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
    /**
     * Adds project in the system
     * @summary Adds project in the system
     * @param {Project} project Adds project in the system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public createProject(project: Project, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).createProject(project, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists project in the system
     * @summary Lists project in the system
     * @param {ListProjectsRequest} listProjectsRequest Lists project in the system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public listProjects(listProjectsRequest: ListProjectsRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).listProjects(listProjectsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * performs project updation
     * @summary Updates a project
     * @param {Project} [project] Project object that needs to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public updateProject(project?: Project, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).updateProject(project, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TaskApi - axios parameter creator
 * @export
 */
export const TaskApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds task in the system
         * @summary Adds task in the system
         * @param {Task} task Adds task in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTask: async (task: Task, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'task' is not null or undefined
            assertParamExists('createTask', 'task', task)
            const localVarPath = `/task/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(task, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * performs task updation
         * @summary Deletes a task
         * @param {DeleteTaskRequest} [deleteTaskRequest] Id of the Task that needs to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTask: async (deleteTaskRequest?: DeleteTaskRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/task/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteTaskRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists task in the system
         * @summary Lists task in the system
         * @param {ListTasksRequest} listTasksRequest Lists task in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTasks: async (listTasksRequest: ListTasksRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listTasksRequest' is not null or undefined
            assertParamExists('listTasks', 'listTasksRequest', listTasksRequest)
            const localVarPath = `/task/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listTasksRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * performs task updation
         * @summary Updates a task
         * @param {Task} [task] Task object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask: async (task?: Task, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/task/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(task, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskApi - functional programming interface
 * @export
 */
export const TaskApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds task in the system
         * @summary Adds task in the system
         * @param {Task} task Adds task in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTask(task: Task, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTask(task, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.createTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * performs task updation
         * @summary Deletes a task
         * @param {DeleteTaskRequest} [deleteTaskRequest] Id of the Task that needs to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTask(deleteTaskRequest?: DeleteTaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTask(deleteTaskRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.deleteTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Lists task in the system
         * @summary Lists task in the system
         * @param {ListTasksRequest} listTasksRequest Lists task in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTasks(listTasksRequest: ListTasksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTasksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTasks(listTasksRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.listTasks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * performs task updation
         * @summary Updates a task
         * @param {Task} [task] Task object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTask(task?: Task, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTask(task, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.updateTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TaskApi - factory interface
 * @export
 */
export const TaskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskApiFp(configuration)
    return {
        /**
         * Adds task in the system
         * @summary Adds task in the system
         * @param {Task} task Adds task in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTask(task: Task, options?: any): AxiosPromise<Task> {
            return localVarFp.createTask(task, options).then((request) => request(axios, basePath));
        },
        /**
         * performs task updation
         * @summary Deletes a task
         * @param {DeleteTaskRequest} [deleteTaskRequest] Id of the Task that needs to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTask(deleteTaskRequest?: DeleteTaskRequest, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTask(deleteTaskRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists task in the system
         * @summary Lists task in the system
         * @param {ListTasksRequest} listTasksRequest Lists task in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTasks(listTasksRequest: ListTasksRequest, options?: any): AxiosPromise<ListTasksResponse> {
            return localVarFp.listTasks(listTasksRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * performs task updation
         * @summary Updates a task
         * @param {Task} [task] Task object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask(task?: Task, options?: any): AxiosPromise<Task> {
            return localVarFp.updateTask(task, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskApi - object-oriented interface
 * @export
 * @class TaskApi
 * @extends {BaseAPI}
 */
export class TaskApi extends BaseAPI {
    /**
     * Adds task in the system
     * @summary Adds task in the system
     * @param {Task} task Adds task in the system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public createTask(task: Task, options?: AxiosRequestConfig) {
        return TaskApiFp(this.configuration).createTask(task, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * performs task updation
     * @summary Deletes a task
     * @param {DeleteTaskRequest} [deleteTaskRequest] Id of the Task that needs to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public deleteTask(deleteTaskRequest?: DeleteTaskRequest, options?: AxiosRequestConfig) {
        return TaskApiFp(this.configuration).deleteTask(deleteTaskRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists task in the system
     * @summary Lists task in the system
     * @param {ListTasksRequest} listTasksRequest Lists task in the system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public listTasks(listTasksRequest: ListTasksRequest, options?: AxiosRequestConfig) {
        return TaskApiFp(this.configuration).listTasks(listTasksRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * performs task updation
     * @summary Updates a task
     * @param {Task} [task] Task object that needs to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public updateTask(task?: Task, options?: AxiosRequestConfig) {
        return TaskApiFp(this.configuration).updateTask(task, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds user in the system
         * @summary Adds user in the system
         * @param {User} user Adds user in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (user: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('createUser', 'user', user)
            const localVarPath = `/user/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists user in the system
         * @summary Lists user in the system
         * @param {ListUsersRequest} listUsersRequest Lists user in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: async (listUsersRequest: ListUsersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listUsersRequest' is not null or undefined
            assertParamExists('listUsers', 'listUsersRequest', listUsersRequest)
            const localVarPath = `/user/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listUsersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds user in the system
         * @summary Adds user in the system
         * @param {User} user Adds user in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(user: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(user, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.createUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Lists user in the system
         * @summary Lists user in the system
         * @param {ListUsersRequest} listUsersRequest Lists user in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsers(listUsersRequest: ListUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(listUsersRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.listUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Adds user in the system
         * @summary Adds user in the system
         * @param {User} user Adds user in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(user: User, options?: any): AxiosPromise<User> {
            return localVarFp.createUser(user, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists user in the system
         * @summary Lists user in the system
         * @param {ListUsersRequest} listUsersRequest Lists user in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(listUsersRequest: ListUsersRequest, options?: any): AxiosPromise<ListUsersResponse> {
            return localVarFp.listUsers(listUsersRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Adds user in the system
     * @summary Adds user in the system
     * @param {User} user Adds user in the system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createUser(user: User, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).createUser(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists user in the system
     * @summary Lists user in the system
     * @param {ListUsersRequest} listUsersRequest Lists user in the system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public listUsers(listUsersRequest: ListUsersRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).listUsers(listUsersRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



