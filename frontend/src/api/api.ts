/* tslint:disable */
/* eslint-disable */
/**
 * Effort Tracker
 * These are APIs for Effort tracker system.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiResponse
 */
export interface ApiResponse {
    /**
     * 
     * @type {number}
     * @memberof ApiResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiResponse
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Filter
 */
export interface Filter {
    /**
     * 
     * @type {Array<string>}
     * @memberof Filter
     */
    'userFilter'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Filter
     */
    'stateFilter'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ListTasksRequest
 */
export interface ListTasksRequest {
    /**
     * 
     * @type {Filter}
     * @memberof ListTasksRequest
     */
    'filter'?: Filter;
}
/**
 * 
 * @export
 * @interface ListTasksResponse
 */
export interface ListTasksResponse {
    /**
     * 
     * @type {Array<Task>}
     * @memberof ListTasksResponse
     */
    'taskList'?: Array<Task>;
}
/**
 * 
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    'estimate'?: number;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username'?: string;
}

/**
 * TaskApi - axios parameter creator
 * @export
 */
export const TaskApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds task in the system
         * @summary Adds task in the system
         * @param {Task} task Adds task in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTask: async (task: Task, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'task' is not null or undefined
            assertParamExists('createTask', 'task', task)
            const localVarPath = `/task/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(task, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists task in the system
         * @summary Lists task in the system
         * @param {ListTasksRequest} listTasksRequest Lists task in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTasks: async (listTasksRequest: ListTasksRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listTasksRequest' is not null or undefined
            assertParamExists('listTasks', 'listTasksRequest', listTasksRequest)
            const localVarPath = `/task/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listTasksRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskApi - functional programming interface
 * @export
 */
export const TaskApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds task in the system
         * @summary Adds task in the system
         * @param {Task} task Adds task in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTask(task: Task, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTask(task, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.createTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Lists task in the system
         * @summary Lists task in the system
         * @param {ListTasksRequest} listTasksRequest Lists task in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTasks(listTasksRequest: ListTasksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTasksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTasks(listTasksRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.listTasks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TaskApi - factory interface
 * @export
 */
export const TaskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskApiFp(configuration)
    return {
        /**
         * Adds task in the system
         * @summary Adds task in the system
         * @param {Task} task Adds task in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTask(task: Task, options?: any): AxiosPromise<Task> {
            return localVarFp.createTask(task, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists task in the system
         * @summary Lists task in the system
         * @param {ListTasksRequest} listTasksRequest Lists task in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTasks(listTasksRequest: ListTasksRequest, options?: any): AxiosPromise<ListTasksResponse> {
            return localVarFp.listTasks(listTasksRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskApi - object-oriented interface
 * @export
 * @class TaskApi
 * @extends {BaseAPI}
 */
export class TaskApi extends BaseAPI {
    /**
     * Adds task in the system
     * @summary Adds task in the system
     * @param {Task} task Adds task in the system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public createTask(task: Task, options?: AxiosRequestConfig) {
        return TaskApiFp(this.configuration).createTask(task, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists task in the system
     * @summary Lists task in the system
     * @param {ListTasksRequest} listTasksRequest Lists task in the system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public listTasks(listTasksRequest: ListTasksRequest, options?: AxiosRequestConfig) {
        return TaskApiFp(this.configuration).listTasks(listTasksRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



